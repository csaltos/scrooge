{{>autogen}}
{{>package}}
{{>type_imports}}
{{>thrift_imports}}

import com.twitter.scrooge.TReusableBuffer;
import com.twitter.scrooge.TReusableMemoryTransport;
import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.finagle.thrift.ClientDeserializeCtx;
import com.twitter.finagle.thrift.ServerToReqRep;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class {{name}} {
  public interface Iface{{#extends_iface}} extends {{parent_name}}.Iface{{/extends_iface}} {
    {{#functions}}
    public {{{return_type.type_name}}} {{name}}({{{argument_list_with_types}}}) throws {{exceptions_string}}TException;
    {{/functions}}
  }

  public interface AsyncIface{{#extends_iface}} extends {{parent_name}}.AsyncIface{{/extends_iface}} {
    {{#functions}}
    public void {{name}}({{{argument_list_with_types}}}{{#has_args}}, {{/has_args}}AsyncMethodCallback<{{{return_type.type_name_in_container}}}> resultHandler) throws TException;
    {{/functions}}
  }

  public interface ServiceIface{{#extends_iface}} extends {{parent_name}}.ServiceIface{{/extends_iface}} {
    {{#functions}}
    public Future<{{{return_type.type_name_in_container}}}> {{name}}({{{argument_list_with_types}}});
    {{/functions}}
  }

  public static class Client extends {{#extends_iface}}{{parent_name}}.Client{{/extends_iface}}{{^extends_iface}}TServiceClient{{/extends_iface}} implements Iface {
    public static class Factory implements TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(TProtocol iprot, TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      super(iprot, oprot);
    }

    {{#functions}}
    public {{{return_type.type_name}}} {{name}}({{{argument_list_with_types}}}) throws {{exceptions_string}}TException
    {
      send_{{name}}({{{argument_list}}});
      {{^is_oneway}}
      {{^return_type.is_void}}return {{/return_type.is_void}}recv_{{name}}();
      {{/is_oneway}}
    }

    public void send_{{name}}({{{argument_list_with_types}}}) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("{{name}}", TMessageType.CALL, ++seqid_));
      {{name}}_args __args__ = new {{name}}_args();
      {{#fields}}
      __args__.set{{#cap}}{{field_name}}{{/cap}}({{field_name}});
      {{/fields}}
      __args__.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
    {{^is_oneway}}

    public {{{return_type.type_name}}} recv_{{name}}() throws {{exceptions_string}}TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.readFrom(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "{{name}} failed: out of sequence response");
      }
      {{name}}_result result = new {{name}}_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      {{^return_type.is_void}}
      if (result.isSetSuccess()) {
        return result.success;
      }
      {{/return_type.is_void}}
      {{#exceptions}}
      if (result.{{field_name}} != null) {
        throw result.{{field_name}};
      }
      {{/exceptions}}
      {{#return_type.is_void}}
      return;
      {{/return_type.is_void}}
      {{^return_type.is_void}}
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "{{name}} failed: unknown result");
      {{/return_type.is_void}}
    }
    {{/is_oneway}}
    {{/functions}}
  }

  public static class AsyncClient extends {{#extends_iface}}{{parent_name}}.AsyncClient{{/extends_iface}}{{^extends_iface}}TAsyncClient{{/extends_iface}} implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private final TAsyncClientManager clientManager;
      private final TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    private final TNonblockingTransport transport;
    private final TAsyncClientManager manager;

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
      this.manager = clientManager;
      this.transport = transport;
    }

    {{#functions}}
    public void {{name}}({{{argument_list_with_types}}}{{#has_args}}, {{/has_args}}AsyncMethodCallback<{{{return_type.type_name_in_container}}}> __resultHandler__) throws TException {
      checkReady();
      {{name}}_call __method_call__ = new {{name}}_call({{{argument_list}}}{{#has_args}}, {{/has_args}}__resultHandler__, this, super.getProtocolFactory(), this.transport);
      this.manager.call(__method_call__);
    }

    public static class {{name}}_call extends TAsyncMethodCall<{{{return_type.type_name_in_container}}}> {
      {{#fields}}
      private {{{field_type.type_name}}} {{field_name}};
      {{/fields}}

      public {{name}}_call({{{argument_list_with_types}}}{{#has_args}}, {{/has_args}}AsyncMethodCallback<{{{return_type.type_name_in_container}}}> __resultHandler__, TAsyncClient __client__, TProtocolFactory __protocolFactory__, TNonblockingTransport __transport__) throws TException {
        super(__client__, __protocolFactory__, __transport__, __resultHandler__, {{#is_oneway}}true{{/is_oneway}}{{^is_oneway}}false{{/is_oneway}});
        {{#fields}}
        this.{{field_name}} = {{field_name}};
        {{/fields}}
      }

      public void write_args(TProtocol __prot__) throws TException {
        __prot__.writeMessageBegin(new TMessage("{{name}}", TMessageType.CALL, 0));
        {{name}}_args __args__ = new {{name}}_args();
        {{#fields}}
        __args__.set{{#cap}}{{field_name}}{{/cap}}({{field_name}});
        {{/fields}}
        __args__.write(__prot__);
        __prot__.writeMessageEnd();
      }

      protected {{{return_type.type_name_in_container}}} getResult() throws {{exceptions_string}}TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol __prot__ = super.client.getProtocolFactory().getProtocol(__memoryTransport__);
        {{#is_oneway}}
        return null;
        {{/is_oneway}}
        {{^is_oneway}}
        {{#return_type.is_void}}

        return null;
        {{/return_type.is_void}}
        {{^return_type.is_void}}
        return (new Client(__prot__)).recv_{{name}}();
        {{/return_type.is_void}}
        {{/is_oneway}}
      }
     }
   {{/functions}}
   }


  public static class ServiceToClient{{#extends_iface}} extends {{parent_name}}.ServiceToClient{{/extends_iface}} implements ServiceIface {
    private final com.twitter.finagle.Service<ThriftClientRequest, byte[]> service;
    private final TProtocolFactory protocolFactory;
    private final TReusableBuffer tlReusableBuffer;
    {{^is_oneway}}
    private final scala.PartialFunction<com.twitter.finagle.service.ReqRep,com.twitter.finagle.service.ResponseClass> responseClassifier;

    /**
     * @deprecated use {@link com.twitter.finagle.thrift.RichClientParam} instead
     */
    @Deprecated
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory, scala.PartialFunction<com.twitter.finagle.service.ReqRep,com.twitter.finagle.service.ResponseClass> responseClassifier) {
      this(service, new com.twitter.finagle.thrift.RichClientParam(protocolFactory, responseClassifier));
    }
    {{/is_oneway}}

    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, com.twitter.finagle.thrift.RichClientParam clientParam) {
      {{#extends_iface}}super(service, clientParam);{{/extends_iface}}
      this.service = service;
      this.protocolFactory = clientParam.restrictedProtocolFactory();
      {{^is_oneway}}this.responseClassifier = clientParam.responseClassifier();{{/is_oneway}}
      this.tlReusableBuffer = new TReusableBuffer(512, clientParam.maxThriftBufferSize());
    }

    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service) {
      this(service, new com.twitter.finagle.thrift.RichClientParam());
    }

    /**
     * @deprecated use {@link com.twitter.finagle.thrift.RichClientParam} instead
     */
    @Deprecated
    public ServiceToClient(com.twitter.finagle.Service<ThriftClientRequest, byte[]> service, TProtocolFactory protocolFactory) {
      this(service, new com.twitter.finagle.thrift.RichClientParam(protocolFactory, com.twitter.finagle.service.ResponseClassifier.Default()));
    }

    {{#functions}}
    public Future<{{{return_type.type_name_in_container}}}> {{name}}({{{argument_list_with_types}}}) {
      try {
        TReusableMemoryTransport __memoryTransport__ = tlReusableBuffer.get();
        TProtocol __prot__ = this.protocolFactory.getProtocol(__memoryTransport__);
        __prot__.writeMessageBegin(new TMessage("{{name}}", TMessageType.CALL, 0));
        {{name}}_args __args__ = new {{name}}_args();
        {{#fields}}
        __args__.set{{#cap}}{{field_name}}{{/cap}}({{field_name}});
        {{/fields}}
        {{^is_oneway}}

        Function<byte[], com.twitter.util.Try<{{{return_type.type_name_in_container}}}>> replyDeserializer =
          new Function<byte[], com.twitter.util.Try<{{{return_type.type_name_in_container}}}>>() {
            public com.twitter.util.Try<{{{return_type.type_name_in_container}}}> apply(byte[] __buffer__) {
              TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
              TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
              try {
                {{#is_oneway_or_void}}
                (new Client(__prot__)).recv_{{name}}();
                return new com.twitter.util.Return<{{{return_type.type_name_in_container}}}>(null);
                {{/is_oneway_or_void}}
                {{^is_oneway_or_void}}
                return new com.twitter.util.Return<{{{return_type.type_name_in_container}}}>(((new Client(__prot__)).recv_{{name}}()));
                {{/is_oneway_or_void}}
              } catch (Exception e) {
                return new com.twitter.util.Throw<{{{return_type.type_name_in_container}}}>(e);
              }
            }
          };

        ClientDeserializeCtx<{{{return_type.type_name_in_container}}}> serdeCtx = new ClientDeserializeCtx<>(__args__, replyDeserializer);
        return com.twitter.finagle.context.Contexts.local().let(
          ClientDeserializeCtx.Key(),
          serdeCtx,
          new com.twitter.util.ExceptionalFunction0<Future<{{{return_type.type_name_in_container}}}>>() {
            public Future<{{{return_type.type_name_in_container}}}> applyE() throws TException {
              serdeCtx.rpcName("{{name}}");
              long start = System.nanoTime();
              __args__.write(__prot__);
              __prot__.writeMessageEnd();
              serdeCtx.serializationTime(System.nanoTime() - start);

              byte[] __buffer__ = Arrays.copyOf(__memoryTransport__.getArray(), __memoryTransport__.length());
              final ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, {{#is_oneway}}true{{/is_oneway}}{{^is_oneway}}false{{/is_oneway}});

              Future<byte[]> __done__ = service.apply(__request__);
              return __done__.flatMap(new Function<byte[], Future<{{{return_type.type_name_in_container}}}>>() {
                public Future<{{{return_type.type_name_in_container}}}> apply(byte[] __buffer__) {
                  TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                  TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                  try {
                    {{#is_oneway_or_void}}
                    (new Client(__prot__)).recv_{{name}}();
                    return Future.value(null);
                    {{/is_oneway_or_void}}
                    {{^is_oneway_or_void}}
                    return Future.value((new Client(__prot__)).recv_{{name}}());
                   {{/is_oneway_or_void}}
                  } catch (Exception e) {
                    return Future.exception(e);
                  }
                }
              });
            }
          });
        {{/is_oneway}}
        {{#is_oneway}}

        Function<byte[], com.twitter.util.Try<{{{return_type.type_name_in_container}}}>> replyDeserializer =
          new Function<byte[], com.twitter.util.Try<{{{return_type.type_name_in_container}}}>>() {
            public com.twitter.util.Try<{{{return_type.type_name_in_container}}}> apply(byte[] __buffer__) {
              return new com.twitter.util.Return<{{{return_type.type_name_in_container}}}>(null);
            }
          };

        ClientDeserializeCtx<{{{return_type.type_name_in_container}}}> serdeCtx = new ClientDeserializeCtx<>(__args__, replyDeserializer);
        return com.twitter.finagle.context.Contexts.local().let(
          ClientDeserializeCtx.Key(),
          serdeCtx,
          new com.twitter.util.ExceptionalFunction0<Future<{{{return_type.type_name_in_container}}}>>() {
            public Future<{{{return_type.type_name_in_container}}}> applyE() throws TException {
              serdeCtx.rpcName("{{name}}");
              long start = System.nanoTime();
              __args__.write(__prot__);
              __prot__.writeMessageEnd();
              serdeCtx.serializationTime(System.nanoTime() - start);

              byte[] __buffer__ = Arrays.copyOf(__memoryTransport__.getArray(), __memoryTransport__.length());
              final ThriftClientRequest __request__ = new ThriftClientRequest(__buffer__, {{#is_oneway}}true{{/is_oneway}}{{^is_oneway}}false{{/is_oneway}});

              Future<byte[]> __done__ = service.apply(__request__);
              return __done__.flatMap(new Function<byte[], Future<{{{return_type.type_name_in_container}}}>>() {
                public Future<{{{return_type.type_name_in_container}}}> apply(byte[] __buffer__) {
                  TMemoryInputTransport __memoryTransport__ = new TMemoryInputTransport(__buffer__);
                  TProtocol __prot__ = ServiceToClient.this.protocolFactory.getProtocol(__memoryTransport__);
                  try {
                    {{#is_oneway_or_void}}
                    {{^is_oneway}}
                    (new Client(__prot__)).recv_{{name}}();
                    {{/is_oneway}}
                    return Future.value(null);
                    {{/is_oneway_or_void}}
                    {{^is_oneway_or_void}}
                    return Future.value((new Client(__prot__)).recv_{{name}}());
                    {{/is_oneway_or_void}}
                  } catch (Exception e) {
                    return Future.exception(e);
                  }
                }
              });
            }
          });
        {{/is_oneway}}
      } catch (TException e) {
        return Future.exception(e);
      } finally {
        tlReusableBuffer.reset();
      }
    }
    {{/functions}}
  }

  public static class Processor{{#extends_iface}} extends {{parent_name}}.Processor{{/extends_iface}} implements TProcessor {
    public Processor(Iface iface)
    {
      {{#extends_iface}}
      super(iface);
      {{/extends_iface}}
      iface_ = iface;
      {{#functions}}
      processMap_.put("{{name}}", new {{name}}());
      {{/functions}}
    }

    {{^extends_iface}}
    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    {{/extends_iface}}
    private Iface iface_;
    {{^extends_iface}}
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();
    {{/extends_iface}}

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    {{#functions}}
    private class {{name}} implements {{#extends_iface}}{{parent_name}}.Processor.{{/extends_iface}}ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        {{name}}_args args = new {{name}}_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        {{^is_oneway}}
        {{name}}_result result = new {{name}}_result();
        {{/is_oneway}}
        {{#has_exceptions}}
        try {
        {{/has_exceptions}}
        {{#i_if_has_exceptions}}
        {{^is_oneway}}{{^return_type.is_void}}result.success = {{/return_type.is_void}}{{/is_oneway}}iface_.{{name}}({{{argument_list_with_args}}});
        {{^is_oneway}}{{^return_type.is_void}}{{^return_type.nullable}}result.setSuccessIsSet(true);{{/return_type.nullable}}{{/return_type.is_void}}{{/is_oneway}}
        {{/i_if_has_exceptions}}
        {{^is_oneway}}{{#exceptions}}
        } catch ({{{field_type.type_name}}} {{field_name}}) {
          {{^is_oneway}}
          result.{{field_name}} = {{field_name}};
          {{/is_oneway}}
        {{/exceptions}}
        {{#has_exceptions}}
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing {{name}}");
          oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        {{/has_exceptions}}{{/is_oneway}}
        {{#is_oneway}}
        return;
        {{/is_oneway}}
        {{^is_oneway}}
        oprot.writeMessageBegin(new TMessage("{{name}}", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        {{/is_oneway}}
      }
    }
    {{/functions}}
  }

  public static class Service {{#extends_iface}}extends {{parent_name}}.Service{{/extends_iface}}{{^extends_iface}}extends com.twitter.finagle.Service<byte[], byte[]>{{/extends_iface}} {
    private final ServiceIface iface;
    private final com.twitter.finagle.Filter.TypeAgnostic filters;
    private final TProtocolFactory protocolFactory;
    private final String serviceName;
    private final TReusableBuffer tlReusableBuffer;
    {{^extends_iface}}
    protected HashMap<String, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]>> serviceMap =
      new HashMap<String, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]>>();
    {{/extends_iface}}
    public Service(final ServiceIface iface, final com.twitter.finagle.Filter.TypeAgnostic filters, final com.twitter.finagle.thrift.RichServerParam serverParam) {
    {{#extends_iface}}
      super(iface, filters, serverParam);
    {{/extends_iface}}
      this.iface = iface;
      this.filters = filters;
      this.protocolFactory = serverParam.restrictedProtocolFactory();
      this.serviceName = serverParam.serviceName();
      this.tlReusableBuffer = new TReusableBuffer(512, serverParam.maxThriftBufferSize());
      createMethods();
    }

    public Service(final ServiceIface iface, final com.twitter.finagle.thrift.RichServerParam serverParam) {
      this(iface, com.twitter.finagle.Filter.typeAgnosticIdentity(), serverParam);
    }

    public Service(final ServiceIface iface) {
      this(iface, new com.twitter.finagle.thrift.RichServerParam());
    }

    /**
     * @deprecated use {@link com.twitter.finagle.thrift.RichServerParam} instead
     */
    @Deprecated
    public Service(final ServiceIface iface, final TProtocolFactory protocolFactory) {
      this(iface, new com.twitter.finagle.thrift.RichServerParam(protocolFactory));
    }

    private void createMethods() {
      {{#functions}}

      class {{name}}Service {
        private final com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]> protocolExnFilter = new com.twitter.finagle.SimpleFilter<scala.Tuple2<TProtocol, Integer>, byte[]>() {
          @Override
          public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> service) {
            return service.apply(request).rescue(new Function<Throwable, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(Throwable e) {
                TProtocol iprot = request._1();
                Integer seqid = request._2();
                if (e instanceof TProtocolException) {
                  try {
                    iprot.readMessageEnd();
                    setReqRepContext(request, new com.twitter.util.Throw(new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage())));
                    return exception("{{name}}", seqid, TApplicationException.PROTOCOL_ERROR, e.getMessage());
                  } catch (Exception e1) {
                    setReqRepContext(request, new com.twitter.util.Throw(e1));
                    return Future.exception(e1);
                  }
                } else {
                  setReqRepContext(request, new com.twitter.util.Throw(e));
                  return Future.exception(e);
                }
              }
            });
          }
        };

        private final com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], {{name}}_args, {{{return_type.type_name_in_container}}}> serdeFilter = new com.twitter.finagle.Filter<scala.Tuple2<TProtocol, Integer>, byte[], {{name}}_args, {{{return_type.type_name_in_container}}}>() {
          @Override
          public Future<byte[]> apply(scala.Tuple2<TProtocol, Integer> request, com.twitter.finagle.Service<{{name}}_args, {{{return_type.type_name_in_container}}}> service) {
            TProtocol iprot = request._1();
            Integer seqid = request._2();
            {{name}}_args args = new {{name}}_args();

            try {
              long start = System.nanoTime();
              args.read(iprot);
              iprot.readMessageEnd();
              com.twitter.finagle.tracing.Trace.recordBinary("srv/request_deserialization_ns", System.nanoTime() - start);
            } catch (Exception e) {
              return Future.exception(e);
            }

            Future<{{{return_type.type_name_in_container}}}> res = com.twitter.finagle.context.Contexts.local().let(
                com.twitter.finagle.thrift.MethodMetadata.Key(),
                new com.twitter.finagle.thrift.MethodMetadata(
                    "{{name}}",
                    serviceName,
                    {{name}}_args.class,
                    {{#is_oneway}}Void.class{{/is_oneway}}{{^is_oneway}}{{name}}_result.class{{/is_oneway}}),
                new scala.runtime.AbstractFunction0<Future<{{{return_type.type_name_in_container}}}>>() {
                  @Override
                  public Future<{{{return_type.type_name_in_container}}}> apply() {
                    return service.apply(args);
                  }
                });
            {{#is_oneway}}
            return res.map(new Function<{{{return_type.type_name_in_container}}}, byte[]>() {
              public byte[] apply({{{return_type.type_name_in_container}}} value) {
                setReqRepContext(args, new com.twitter.util.Return(value));
                return new byte[0];
              }
            });
            {{/is_oneway}}
            {{^is_oneway}}
            {{name}}_result result = new {{name}}_result();
            return res.flatMap(new Function<{{{return_type.type_name_in_container}}}, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply({{{return_type.type_name_in_container}}} value) {
              {{^is_oneway}}
              {{^return_type.is_void}}
                result.success = value;
                result.setSuccessIsSet(true);
              {{/return_type.is_void}}
              {{/is_oneway}}
                setReqRepContext(args, new com.twitter.util.Return(value));
                return reply("{{name}}", seqid, result);
              }
            }).rescue(new Function<Throwable, Future<byte[]>>() {
              @Override
              public Future<byte[]> apply(Throwable t) {
                {{^is_oneway}}{{#has_exceptions}}
                {{#exceptions}}
                {{^first}}else {{/first}}if (t instanceof {{{field_type.type_name}}}) {
                  result.{{field_name}} = ({{{field_type.type_name}}})t;
                  setReqRepContext(args, new com.twitter.util.Throw(result.{{field_name}}));
                  return reply("{{name}}", seqid, result);
                }
                {{/exceptions}}
                else {
                  setReqRepContext(args, new com.twitter.util.Throw(t));
                  return Future.exception(t);
                }
                {{/has_exceptions}}
                {{^has_exceptions}}
                setReqRepContext(args, new com.twitter.util.Throw(t));
                return Future.exception(t);
                {{/has_exceptions}}
                {{/is_oneway}}
                {{#is_oneway}}
                return Future.exception(t);
                {{/is_oneway}}
              }
            });
            {{/is_oneway}}
          }
        };

        private final com.twitter.finagle.Service<{{name}}_args, {{{return_type.type_name_in_container}}}> methodService = new com.twitter.finagle.Service<{{name}}_args, {{{return_type.type_name_in_container}}}>() {
          @Override
          public Future<{{{return_type.type_name_in_container}}}> apply({{name}}_args args) {
            Future<{{{return_type.type_name_in_container}}}> future = iface.{{name}}({{{argument_list_with_args}}});
            return future;
          }
        };

        private final com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> getService =
          protocolExnFilter.andThen(serdeFilter).andThen(filters.toFilter()).andThen(methodService);
      }

      serviceMap.put("{{name}}", (new {{name}}Service()).getService);
      {{/functions}}
    }

    private void setReqRepContext(Object req, com.twitter.util.Try<Object> rep) {
      scala.Option<ServerToReqRep> serdeCtx = com.twitter.finagle.context.Contexts.local().get(ServerToReqRep.Key());
      if (serdeCtx.nonEmpty()) {
        serdeCtx.get().setReqRep(new com.twitter.finagle.service.ReqRep(req, rep));
      }
    }

    public Future<byte[]> apply(byte[] request) {
      TTransport inputTransport = new TMemoryInputTransport(request);
      TProtocol iprot = protocolFactory.getProtocol(inputTransport);

      TMessage msg;
      try {
        msg = iprot.readMessageBegin();
      } catch (Exception e) {
        return Future.exception(e);
      }

      com.twitter.finagle.Service<scala.Tuple2<TProtocol, Integer>, byte[]> svc = serviceMap.get(msg.name);
      if (svc == null) {
        try {
          TProtocolUtil.skip(iprot, TType.STRUCT);
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
          TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
          TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);
          oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return Future.value(Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length()));
        } catch (Exception e) {
          return Future.exception(e);
        } finally {
          tlReusableBuffer.reset();
        }
      }

      return svc.apply(new scala.Tuple2(iprot, msg.seqid));
    }

    private Future<byte[]> reply(String name, Integer seqid, TBase result) {
      try {
        long start = System.nanoTime();
        TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
        TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

        oprot.writeMessageBegin(new TMessage(name, TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        com.twitter.finagle.tracing.Trace.recordBinary("srv/response_serialization_ns", System.nanoTime() - start);

        return Future.value(Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length()));
      } catch (Exception e) {
        return Future.exception(e);
      } finally {
        tlReusableBuffer.reset();
      }
    }

    private Future<byte[]> exception(String name, Integer seqid, Integer code, String message) {
      try {
        TApplicationException x = new TApplicationException(code, message);
        TReusableMemoryTransport memoryBuffer = tlReusableBuffer.get();
        TProtocol oprot = protocolFactory.getProtocol(memoryBuffer);

        oprot.writeMessageBegin(new TMessage(name, TMessageType.EXCEPTION, seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        byte[] buffer = Arrays.copyOf(memoryBuffer.getArray(), memoryBuffer.length());
        return Future.value(buffer);
      } catch (Exception e1) {
        return Future.exception(e1);
      } finally {
        tlReusableBuffer.reset();
      }
    }
  }

  {{#functions}}
  {{{arg_struct}}}

  {{^is_oneway}}
  {{{result_struct}}}

  {{/is_oneway}}

  {{/functions}}
}
